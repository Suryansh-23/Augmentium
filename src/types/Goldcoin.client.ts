/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, Uint128, InstantiateMsg, ExecuteMsg, QueryMsg} from "./Goldcoin.types";
export interface GoldcoinReadOnlyInterface {
  contractAddress: string;
  balanceOf: ({
    addr
  }: {
    addr: Addr;
  }) => Promise<BalanceOfResponse>;
  getTotalSupply: () => Promise<GetTotalSupplyResponse>;
  getExchangeRate: () => Promise<GetExchangeRateResponse>;
}
export class GoldcoinQueryClient implements GoldcoinReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.balanceOf = this.balanceOf.bind(this);
    this.getTotalSupply = this.getTotalSupply.bind(this);
    this.getExchangeRate = this.getExchangeRate.bind(this);
  }

  balanceOf = async ({
    addr
  }: {
    addr: Addr;
  }): Promise<BalanceOfResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balance_of: {
        addr
      }
    });
  };
  getTotalSupply = async (): Promise<GetTotalSupplyResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_total_supply: {}
    });
  };
  getExchangeRate = async (): Promise<GetExchangeRateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_exchange_rate: {}
    });
  };
}
export interface GoldcoinInterface extends GoldcoinReadOnlyInterface {
  contractAddress: string;
  sender: string;
  transfer: ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setExchangeRate: ({
    exchangeRate
  }: {
    exchangeRate: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  buy: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  redeem: ({
    gcAmount
  }: {
    gcAmount: Uint128;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class GoldcoinClient extends GoldcoinQueryClient implements GoldcoinInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.transfer = this.transfer.bind(this);
    this.setExchangeRate = this.setExchangeRate.bind(this);
    this.buy = this.buy.bind(this);
    this.redeem = this.redeem.bind(this);
  }

  transfer = async ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer: {
        amount,
        recipient
      }
    }, _fee, _memo, _funds);
  };
  setExchangeRate = async ({
    exchangeRate
  }: {
    exchangeRate: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_exchange_rate: {
        exchange_rate: exchangeRate
      }
    }, _fee, _memo, _funds);
  };
  buy = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy: {}
    }, _fee, _memo, _funds);
  };
  redeem = async ({
    gcAmount
  }: {
    gcAmount: Uint128;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      redeem: {
        gc_amount: gcAmount
      }
    }, _fee, _memo, _funds);
  };
}